version: '3.8'

services:
  pgs-auth:
    image: postgres:15
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d auth_db"]
      interval: 1s
      timeout: 1s
      retries: 5
    ports:
      - "5433:5432"  # внешний порт 5433, внутри 5432
    volumes:
      - pgdata-auth:/var/lib/postgresql/data

  pgs-cur:
    image: postgres:15
    environment:
      POSTGRES_DB: currency_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d currency_db"]
      interval: 1s
      timeout: 1s
      retries: 5
    ports:
      - "5434:5432"  # внешний порт 5434, внутри 5432
    volumes:
      - pgdata-currency:/var/lib/postgresql/data

  mgt-auth:
    image: migrate/migrate
    command: >
      -path /migrations
      -database postgres://admin:password@pgs-auth:5432/auth_db?sslmode=disable 
      up
    volumes:
      - ./auth/internal/migrations:/migrations
    depends_on:
      pgs-auth:
        condition: service_healthy

  mgt-cur:
    image: migrate/migrate
    command: >
      -path /migrations
      -database postgres://admin:password@pgs-cur:5432/currency_db?sslmode=disable 
      up
    volumes:
      - ./currency/internal/migrations:/migrations
    depends_on:
      pgs-cur:
        condition: service_healthy


  cron:
    build:
      context: .
      dockerfile: ./deployment/local/Dockerfile
      args:
        - BUILD_TARGET=./currency/cmd/cron/main.go
    volumes:
      - ./deployment/local:/deployment/local  # Mount the local directory into the container
    depends_on:
      pgs-cur:
        condition: service_healthy
    command: ["--config=/deployment/local/currency-local-config.yaml"]

  cur:
    build:
      context: .
      dockerfile: ./deployment/local/Dockerfile
      args:
        - BUILD_TARGET=./currency/cmd/currency/main.go
    volumes:
      - ./deployment/local:/deployment/local
    ports:
      - "8081:8081"
      - "8090:8090"
    depends_on:
      pgs-cur:
        condition: service_healthy
    command: ["--config=/deployment/local/currency-local-config.yaml"]


  auth:
    build:
      context: .
      dockerfile: ./deployment/local/Dockerfile
      args:
        - BUILD_TARGET=./auth/cmd/auth/main.go
    volumes:
      - ./deployment/local:/deployment/local
    ports:
      - "8091:8091"
    depends_on:
      pgs-auth:
        condition: service_healthy
    command: ["--config=/deployment/local/auth-local-config.yaml"]

  gtw:
    build:
      context: .
      dockerfile: ./deployment/local/Dockerfile
      args:
        - BUILD_TARGET=./gateway/cmd/gateway/main.go
    volumes:
      - ./deployment/local:/deployment/local
    ports:
      - "8080:8080"
    depends_on:
      auth:
        condition: service_started
    command: ["--config=/deployment/local/gateway-local-config.yaml"]

  prmt:
    image: prom/prometheus:latest
    volumes:
      - ./currency/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    depends_on:
      - cur

  grfn:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    depends_on:
      - prmt

  nd-prt:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    restart: unless-stopped

  cdvsr:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8083:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

volumes:
  pgdata-auth:
  pgdata-currency:
