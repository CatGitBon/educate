// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vctrl/currency-service/currency/internal/dto"
	repository "github.com/vctrl/currency-service/currency/internal/repository"
)

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// FetchAndSaveCurrencyRates mocks base method.
func (m *MockCurrencyService) FetchAndSaveCurrencyRates(ctx context.Context, baseCurrency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndSaveCurrencyRates", ctx, baseCurrency)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAndSaveCurrencyRates indicates an expected call of FetchAndSaveCurrencyRates.
func (mr *MockCurrencyServiceMockRecorder) FetchAndSaveCurrencyRates(ctx, baseCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndSaveCurrencyRates", reflect.TypeOf((*MockCurrencyService)(nil).FetchAndSaveCurrencyRates), ctx, baseCurrency)
}

// GetCurrencyRatesInInterval mocks base method.
func (m *MockCurrencyService) GetCurrencyRatesInInterval(ctx context.Context, reqDTO *dto.CurrencyRequestDTO) ([]repository.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRatesInInterval", ctx, reqDTO)
	ret0, _ := ret[0].([]repository.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRatesInInterval indicates an expected call of GetCurrencyRatesInInterval.
func (mr *MockCurrencyServiceMockRecorder) GetCurrencyRatesInInterval(ctx, reqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRatesInInterval", reflect.TypeOf((*MockCurrencyService)(nil).GetCurrencyRatesInInterval), ctx, reqDTO)
}
