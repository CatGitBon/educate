package taskThreads

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"sync"
	"time"
)

// 6. –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã

//     > üì¶ –ó–ê–î–ê–ß–ê: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
//     >
//     >
//     > **–£—Å–ª–æ–≤–∏–µ**:
//     >
//     > –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é `StartBatchProcessor(ctx context.Context, input <-chan int)`, –∫–æ—Ç–æ—Ä–∞—è:
//     >
//     > - –°–æ–±–∏—Ä–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ `input` –≤ –±–∞—Ç—á–∏ –ø–æ –º–∞–∫—Å–∏–º—É–º 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//     > - –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥ –±–∞—Ç—á –Ω–µ —Å–æ–±—Ä–∞–Ω ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –µ—Å—Ç—å.
//     > - –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ `fmt.Println("Processed batch:", batch)`.
//     > - –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (`ctx.Done()`).
//     >
//     > **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**:
//     >
//     > - –û—Ç–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ª–∏–±–æ —á–µ—Ä–µ–∑ `context.WithTimeout`, –ª–∏–±–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ `cancel()` ‚Äî –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
//     >
//     >  –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å –≤—ã–∑–æ–≤–æ–º(–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)

func TaskSix() {

	allCount := 100

	wg := &sync.WaitGroup{}
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
	input := make(chan int)
	/* —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞  */
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
	defer cancel()

	go func() {
		fmt.Println("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã")
		bufio.NewReader(os.Stdin).ReadString('\n')
		cancel()
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 0; i <= allCount; i++ {
			time.Sleep(time.Millisecond * 25)
			select {
			case input <- i * 2:
			case <-ctx.Done():
			}
		}
		close(input)
	}()

	wg.Add(1)
	go startBatchProcessor(ctx, input, wg)

	wg.Wait()
	fmt.Println("Main: processing stopped")
}

func startBatchProcessor(ctx context.Context, input <-chan int, wg *sync.WaitGroup) {
	defer wg.Done()

	batchSize := 5
	batchSlice := make([]int, 0, batchSize)

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	for {
		select {
		// -- –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
		case <-ctx.Done():
			return
		// -- –ü–æ–ª–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
		case i, ok := <-input:

			if !ok {
				return
			}
			if len(batchSlice) == batchSize {

				fmt.Println("Processed batch:", batchSlice)
				batchSlice = batchSlice[:0]
			}
			batchSlice = append(batchSlice, i)
		// -- –ü–æ—Å–ª–µ 2—Ö —Å–µ–∫—É–Ω–¥
		case <-time.After(time.Second * 2):
			if len(batchSlice) > 0 {
				fmt.Println("Processed batch:", batchSlice)
			}
			return
		}

	}
}
