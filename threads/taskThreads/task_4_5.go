package taskThreads

import (
	"fmt"
	"sync"
	"sync/atomic"
)

//4. **Потокобезопасный инкремент - Mutex.**
// > Задача: Напишите программу, где 10 горутин инкрементируют один счётчик, защищая его sync.Mutex.
// 1. Что если не обложить мютексом? Воспроизвести race condition.

// 5. **Потокобезопасный инкремент - Atomic.**
//     > Задача: Напишите программу, где 10 горутин инкрементируют один счётчик без использования мютексов, через атомики.
//     Что, если не использовать атомик? Что лучше, атомик или мютекс?

func TaskFourAndFive() {

	// Если не обложить мютексом или атомиком то происходит гонка данных. Атомик прсто превращает 2 операции в одну. Мютекс то же самое но уже более
	// высокоуровневый и может работать с теми блоками кода что ты выберешь. Лучше мютекс

	// mutex := &sync.Mutex{}
	wg := &sync.WaitGroup{}
	var count int64 = 0

	for range 1000 {
		wg.Add(1)
		go func() {
			defer wg.Done()

			// race condition.
			// count++

			// mutex.Lock()
			// count++
			// mutex.Unlock()

			atomic.AddInt64(&count, 1)
		}()
	}

	wg.Wait()
	fmt.Println(count)

}
